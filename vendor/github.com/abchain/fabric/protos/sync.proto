syntax = "proto3";
package protos;
import "fabric.proto";

service Sync {
    // response for the controlling channel: state searching and info
    rpc Control(stream SyncMsg) returns (stream SyncMsg) {}
    rpc Data(stream SyncMsg) returns (stream SyncMsg) {}
}

message GlobalState{
    uint64 count = 1;
    repeated bytes  nextNodeStateHash = 3;
    repeated bytes  parentNodeStateHash = 4;
    bytes  lastBranchNodeStateHash = 5;
    bytes  nextBranchNodeStateHash = 7;
}

// BlockState is the payload of Message.SYNC_BLOCK_ADDED. When a VP
// commits a new block to the ledger, it will notify its connected NVPs of the
// block and the delta state. The NVP may call the ledger APIs to apply the
// block and the delta state to its ledger if the block's previousBlockHash
// equals to the NVP's current block hash
message BlockState {
    Block block = 1;
    bytes stateDelta = 2;
    uint64 Height = 3;
}

// SyncBlockRange is the payload of Message.SYNC_GET_BLOCKS, where
// start and end indicate the starting and ending blocks inclusively. The order
// in which blocks are returned is defined by the start and end values. For
// example, if start=3 and end=5, the order of blocks will be 3, 4, 5.
// If start=5 and end=3, the order will be 5, 4, 3.
message SyncBlockRange {
    uint64 correlationId = 1;
    uint64 start = 2;
    uint64 end = 3;
}

// SyncBlocks is the payload of Message.SYNC_BLOCKS, where the range
// indicates the blocks responded to the request SYNC_GET_BLOCKS
message SyncBlocks {
    SyncBlockRange range = 1;
    repeated Block blocks = 2;
}

// SyncSnapshotRequest Payload for the penchainMessage.SYNC_GET_SNAPSHOT message.
message SyncStateSnapshotRequest {
  uint64 correlationId = 1;
}

// SyncStateSnapshot is the payload of Message.SYNC_SNAPSHOT, which is a response
// to penchainMessage.SYNC_GET_SNAPSHOT. It contains the snapshot or a chunk of the
// snapshot on stream, and in which case, the sequence indicate the order
// starting at 0.  The terminating message will have len(delta) == 0.
message SyncStateSnapshot {
    bytes delta = 1;
    uint64 sequence = 2;
    uint64 blockNumber = 3;
    SyncStateSnapshotRequest request = 4;
}

// SyncStateDeltasRequest is the payload of Message.SYNC_GET_STATE.
// blockNumber indicates the block number for the delta which is being
// requested. If no payload is included with SYNC_GET_STATE, it represents
// a request for a snapshot of the current state.
message SyncStateDeltasRequest {
    SyncBlockRange range = 1;
}

// SyncStateDeltas is the payload of the Message.SYNC_STATE in response to
// the Message.SYNC_GET_STATE message.
message SyncStateDeltas {
    SyncBlockRange range = 1;
    repeated bytes deltas = 2;
}

message SyncBlockState {
    SyncBlockRange range = 1;
    repeated BlockState syncdata = 2;
}

// Like chat, stateSync wrap messages used in a syncing session
message SyncMsg {
    enum Type {
        UNDEFINED = 0;

        SYNC_STATE_NOTIFY = 1;
        SYNC_STATE_OPT = 2;

        SYNC_SESSION_START = 5;
        SYNC_SESSION_QUERY = 6;
        SYNC_SESSION_RESPONSE = 7;
        SYNC_SESSION_END = 8;

        SYNC_SESSION_GET_BLOCKS = 11;
        SYNC_SESSION_BLOCKS = 12;

        SYNC_SESSION_GET_SNAPSHOT = 14;
        SYNC_SESSION_SNAPSHOT = 15;
        SYNC_SESSION_GET_DELTAS = 16;
        SYNC_SESSION_DELTAS = 17;
        SYNC_SESSION_START_ACK = 18;
    }
    Type type = 1;
    uint64 correlationId = 2;
    bytes payload = 3;  
}


////////////////////////////////
message SyncStateQuery {
  uint32  id = 1;
  uint64  blockHeight = 2;
}

message SyncStateResp {
  uint32  id = 1;
  bool   postive     = 3;
  bytes  statehash   = 4;
  uint64  blockHeight = 5;
}
