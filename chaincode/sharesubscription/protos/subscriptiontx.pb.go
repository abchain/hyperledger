// Code generated by protoc-gen-go. DO NOT EDIT.
// source: subscriptiontx.proto

package ccprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos1 "hyperledger.abchain.org/protos"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// user can register a public key only if it has own some pais
type RegContract struct {
	DelegatorAddr *protos1.TxAddr       `protobuf:"bytes,1,opt,name=delegatorAddr" json:"delegatorAddr,omitempty"`
	ContractBody  []*RegContract_Member `protobuf:"bytes,5,rep,name=contractBody" json:"contractBody,omitempty"`
}

func (m *RegContract) Reset()                    { *m = RegContract{} }
func (m *RegContract) String() string            { return proto.CompactTextString(m) }
func (*RegContract) ProtoMessage()               {}
func (*RegContract) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *RegContract) GetDelegatorAddr() *protos1.TxAddr {
	if m != nil {
		return m.DelegatorAddr
	}
	return nil
}

func (m *RegContract) GetContractBody() []*RegContract_Member {
	if m != nil {
		return m.ContractBody
	}
	return nil
}

type RegContract_Member struct {
	Addr   *protos1.TxAddr `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Weight uint32          `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *RegContract_Member) Reset()                    { *m = RegContract_Member{} }
func (m *RegContract_Member) String() string            { return proto.CompactTextString(m) }
func (*RegContract_Member) ProtoMessage()               {}
func (*RegContract_Member) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0, 0} }

func (m *RegContract_Member) GetAddr() *protos1.TxAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *RegContract_Member) GetWeight() uint32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type QueryContract struct {
	ContractAddr *protos1.TxAddr `protobuf:"bytes,1,opt,name=contractAddr" json:"contractAddr,omitempty"`
	MemberAddr   *protos1.TxAddr `protobuf:"bytes,2,opt,name=memberAddr" json:"memberAddr,omitempty"`
}

func (m *QueryContract) Reset()                    { *m = QueryContract{} }
func (m *QueryContract) String() string            { return proto.CompactTextString(m) }
func (*QueryContract) ProtoMessage()               {}
func (*QueryContract) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *QueryContract) GetContractAddr() *protos1.TxAddr {
	if m != nil {
		return m.ContractAddr
	}
	return nil
}

func (m *QueryContract) GetMemberAddr() *protos1.TxAddr {
	if m != nil {
		return m.MemberAddr
	}
	return nil
}

func init() {
	proto.RegisterType((*RegContract)(nil), "ccprotos.RegContract")
	proto.RegisterType((*RegContract_Member)(nil), "ccprotos.RegContract.Member")
	proto.RegisterType((*QueryContract)(nil), "ccprotos.QueryContract")
}

func init() { proto.RegisterFile("subscriptiontx.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 245 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x8f, 0xcf, 0x4a, 0xc4, 0x30,
	0x10, 0xc6, 0xe9, 0xaa, 0x45, 0xa6, 0xd6, 0x43, 0x10, 0x29, 0x8b, 0x87, 0xd2, 0x53, 0x41, 0xc8,
	0x42, 0xf5, 0x01, 0xfc, 0x77, 0xf5, 0x60, 0xf1, 0x05, 0xd2, 0x64, 0x48, 0x0b, 0xbb, 0x4d, 0x99,
	0x64, 0xb1, 0x7d, 0x46, 0x5f, 0x4a, 0x4c, 0x56, 0x6d, 0x41, 0xbd, 0x25, 0xf3, 0x7d, 0xbf, 0x99,
	0xef, 0x83, 0x0b, 0xbb, 0x6f, 0xac, 0xa4, 0x6e, 0x70, 0x9d, 0xe9, 0xdd, 0xc8, 0x07, 0x32, 0xce,
	0xb0, 0x53, 0x29, 0xfd, 0xc3, 0xae, 0xaf, 0xdb, 0x69, 0x40, 0xda, 0xa2, 0xd2, 0x48, 0x5c, 0x34,
	0xb2, 0x15, 0x5d, 0xcf, 0x0d, 0xe9, 0x4d, 0xd0, 0x37, 0x6e, 0x14, 0x4a, 0x51, 0xc0, 0x8a, 0xf7,
	0x08, 0x92, 0x1a, 0xf5, 0xa3, 0xe9, 0x1d, 0x09, 0xe9, 0xd8, 0x2d, 0xa4, 0x0a, 0xb7, 0xa8, 0x85,
	0x33, 0x74, 0xaf, 0x14, 0x65, 0x51, 0x1e, 0x95, 0x49, 0x75, 0x1e, 0xec, 0x96, 0xbf, 0x8e, 0x9f,
	0xd3, 0x7a, 0x69, 0x62, 0x77, 0x70, 0x26, 0x0f, 0x1b, 0x1e, 0x8c, 0x9a, 0xb2, 0x93, 0xfc, 0xa8,
	0x4c, 0xaa, 0x2b, 0xfe, 0x95, 0x89, 0xcf, 0x4e, 0xf0, 0x67, 0xdc, 0x35, 0x48, 0xf5, 0x82, 0x58,
	0x3f, 0x41, 0x1c, 0xe6, 0xac, 0x80, 0x63, 0xf1, 0xf7, 0x61, 0xaf, 0xb1, 0x4b, 0x88, 0xdf, 0xb0,
	0xd3, 0xad, 0xcb, 0x56, 0x79, 0x54, 0xa6, 0xf5, 0xe1, 0x57, 0x58, 0x48, 0x5f, 0xf6, 0x48, 0xd3,
	0x77, 0x9d, 0xea, 0x27, 0xd8, 0x3f, 0x6d, 0x16, 0x1e, 0xc6, 0x01, 0x76, 0x3e, 0x8a, 0x27, 0x56,
	0xbf, 0x12, 0x33, 0x47, 0x13, 0x7b, 0xe9, 0xe6, 0x23, 0x00, 0x00, 0xff, 0xff, 0x23, 0x97, 0x22,
	0x2a, 0x98, 0x01, 0x00, 0x00,
}
