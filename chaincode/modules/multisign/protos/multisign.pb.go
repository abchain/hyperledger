// Code generated by protoc-gen-go. DO NOT EDIT.
// source: multisign.proto

/*
Package ccprotos is a generated protocol buffer package.

It is generated from these files:
	multisign.proto

It has these top-level messages:
	AddrByWeight
	Contract
	Update
*/
package ccprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "hyperledger.abchain.org/protos"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type AddrByWeight struct {
	Addr   *protos.TxAddr `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	Weight int32          `protobuf:"varint,2,opt,name=weight" json:"weight,omitempty"`
}

func (m *AddrByWeight) Reset()                    { *m = AddrByWeight{} }
func (m *AddrByWeight) String() string            { return proto.CompactTextString(m) }
func (*AddrByWeight) ProtoMessage()               {}
func (*AddrByWeight) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *AddrByWeight) GetAddr() *protos.TxAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *AddrByWeight) GetWeight() int32 {
	if m != nil {
		return m.Weight
	}
	return 0
}

type Contract struct {
	Threshold int32           `protobuf:"varint,1,opt,name=threshold" json:"threshold,omitempty"`
	Addrs     []*AddrByWeight `protobuf:"bytes,2,rep,name=addrs" json:"addrs,omitempty"`
}

func (m *Contract) Reset()                    { *m = Contract{} }
func (m *Contract) String() string            { return proto.CompactTextString(m) }
func (*Contract) ProtoMessage()               {}
func (*Contract) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Contract) GetThreshold() int32 {
	if m != nil {
		return m.Threshold
	}
	return 0
}

func (m *Contract) GetAddrs() []*AddrByWeight {
	if m != nil {
		return m.Addrs
	}
	return nil
}

type Update struct {
	Addr *protos.TxAddr `protobuf:"bytes,1,opt,name=addr" json:"addr,omitempty"`
	From *protos.TxAddr `protobuf:"bytes,2,opt,name=from" json:"from,omitempty"`
	To   *protos.TxAddr `protobuf:"bytes,3,opt,name=to" json:"to,omitempty"`
}

func (m *Update) Reset()                    { *m = Update{} }
func (m *Update) String() string            { return proto.CompactTextString(m) }
func (*Update) ProtoMessage()               {}
func (*Update) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Update) GetAddr() *protos.TxAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

func (m *Update) GetFrom() *protos.TxAddr {
	if m != nil {
		return m.From
	}
	return nil
}

func (m *Update) GetTo() *protos.TxAddr {
	if m != nil {
		return m.To
	}
	return nil
}

func init() {
	proto.RegisterType((*AddrByWeight)(nil), "ccprotos.AddrByWeight")
	proto.RegisterType((*Contract)(nil), "ccprotos.Contract")
	proto.RegisterType((*Update)(nil), "ccprotos.Update")
}

func init() { proto.RegisterFile("multisign.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 215 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x8e, 0xcf, 0x4b, 0x87, 0x30,
	0x14, 0xc0, 0x71, 0x5f, 0x15, 0x7b, 0x46, 0xc1, 0x02, 0x19, 0x11, 0x21, 0x3b, 0x79, 0x88, 0x05,
	0xf6, 0x17, 0x54, 0xb7, 0x8e, 0xa3, 0x1f, 0x67, 0x73, 0xa6, 0x82, 0x3a, 0xd9, 0x5e, 0x64, 0xff,
	0x7d, 0x6c, 0x2b, 0xea, 0xe0, 0xa1, 0xd3, 0xf6, 0xde, 0xe7, 0xc3, 0xe3, 0x03, 0xa7, 0xf3, 0xfb,
	0x84, 0xa3, 0x1d, 0xfb, 0x45, 0xac, 0x46, 0xa3, 0xa6, 0x59, 0xdb, 0xfa, 0x8f, 0x3d, 0x3f, 0x0b,
	0xef, 0x35, 0x6e, 0x8d, 0x52, 0x26, 0x60, 0xfe, 0x00, 0xc7, 0xb7, 0x4a, 0x99, 0xbb, 0xcf, 0x97,
	0x6e, 0xec, 0x07, 0xa4, 0x1c, 0x62, 0x47, 0x59, 0x54, 0x46, 0x55, 0x5e, 0x9f, 0x04, 0xcb, 0x8a,
	0xc7, 0xcd, 0x59, 0xd2, 0x33, 0x5a, 0x40, 0xfa, 0xe1, 0x6d, 0x46, 0xca, 0xa8, 0x4a, 0xe4, 0xf7,
	0xc4, 0x9f, 0x21, 0xbb, 0xd7, 0x0b, 0x9a, 0xa6, 0x45, 0x7a, 0x01, 0x47, 0x38, 0x98, 0xce, 0x0e,
	0x7a, 0x52, 0xfe, 0x58, 0x22, 0x7f, 0x17, 0xf4, 0x0a, 0x12, 0x77, 0xc9, 0x32, 0x52, 0x1e, 0xaa,
	0xbc, 0x2e, 0xc4, 0x4f, 0xa4, 0xf8, 0x1b, 0x23, 0x83, 0xc4, 0x57, 0x48, 0x9f, 0x56, 0xd5, 0x60,
	0xf7, 0xaf, 0x3a, 0x0e, 0xf1, 0x9b, 0xd1, 0xb3, 0x6f, 0xdb, 0x71, 0x1c, 0xa3, 0x97, 0x40, 0x50,
	0xb3, 0xc3, 0xae, 0x41, 0x50, 0xbf, 0xa6, 0x7e, 0x75, 0xf3, 0x15, 0x00, 0x00, 0xff, 0xff, 0x79,
	0x49, 0xae, 0xa6, 0x4e, 0x01, 0x00, 0x00,
}
