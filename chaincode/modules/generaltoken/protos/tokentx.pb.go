// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tokentx.proto

/*
Package ccprotos is a generated protocol buffer package.

It is generated from these files:
	tokentx.proto

It has these top-level messages:
	SimpleFund
	QueryToken
	QueryTransfer
	QueryGlobal
	BaseToken
	Assign
	FuncRecord
	AccountData
	NonceData
	TokenGlobalData
	MultiTokenMsg
*/
package ccprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "hyperledger.abchain.org/protos"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type QueryToken_Formats int32

const (
	QueryToken_NUMBER  QueryToken_Formats = 0
	QueryToken_ENCODED QueryToken_Formats = 1
)

var QueryToken_Formats_name = map[int32]string{
	0: "NUMBER",
	1: "ENCODED",
}
var QueryToken_Formats_value = map[string]int32{
	"NUMBER":  0,
	"ENCODED": 1,
}

func (x QueryToken_Formats) String() string {
	return proto.EnumName(QueryToken_Formats_name, int32(x))
}
func (QueryToken_Formats) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1, 0} }

type SimpleFund struct {
	Amount []byte         `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	To     *protos.TxAddr `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	From   *protos.TxAddr `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
}

func (m *SimpleFund) Reset()                    { *m = SimpleFund{} }
func (m *SimpleFund) String() string            { return proto.CompactTextString(m) }
func (*SimpleFund) ProtoMessage()               {}
func (*SimpleFund) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *SimpleFund) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *SimpleFund) GetTo() *protos.TxAddr {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SimpleFund) GetFrom() *protos.TxAddr {
	if m != nil {
		return m.From
	}
	return nil
}

type QueryToken struct {
	Format QueryToken_Formats `protobuf:"varint,1,opt,name=format,enum=ccprotos.QueryToken_Formats" json:"format,omitempty"`
	Addr   *protos.TxAddr     `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *QueryToken) Reset()                    { *m = QueryToken{} }
func (m *QueryToken) String() string            { return proto.CompactTextString(m) }
func (*QueryToken) ProtoMessage()               {}
func (*QueryToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *QueryToken) GetFormat() QueryToken_Formats {
	if m != nil {
		return m.Format
	}
	return QueryToken_NUMBER
}

func (m *QueryToken) GetAddr() *protos.TxAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

type QueryTransfer struct {
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryTransfer) Reset()                    { *m = QueryTransfer{} }
func (m *QueryTransfer) String() string            { return proto.CompactTextString(m) }
func (*QueryTransfer) ProtoMessage()               {}
func (*QueryTransfer) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *QueryTransfer) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type QueryGlobal struct {
}

func (m *QueryGlobal) Reset()                    { *m = QueryGlobal{} }
func (m *QueryGlobal) String() string            { return proto.CompactTextString(m) }
func (*QueryGlobal) ProtoMessage()               {}
func (*QueryGlobal) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type BaseToken struct {
	TotalTokens []byte `protobuf:"bytes,1,opt,name=totalTokens,proto3" json:"totalTokens,omitempty"`
}

func (m *BaseToken) Reset()                    { *m = BaseToken{} }
func (m *BaseToken) String() string            { return proto.CompactTextString(m) }
func (*BaseToken) ProtoMessage()               {}
func (*BaseToken) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BaseToken) GetTotalTokens() []byte {
	if m != nil {
		return m.TotalTokens
	}
	return nil
}

type Assign struct {
	Amount []byte         `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	To     *protos.TxAddr `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *Assign) Reset()                    { *m = Assign{} }
func (m *Assign) String() string            { return proto.CompactTextString(m) }
func (*Assign) ProtoMessage()               {}
func (*Assign) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *Assign) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Assign) GetTo() *protos.TxAddr {
	if m != nil {
		return m.To
	}
	return nil
}

type FuncRecord struct {
	Noncekey []byte `protobuf:"bytes,1,opt,name=noncekey,proto3" json:"noncekey,omitempty"`
	IsSend   bool   `protobuf:"varint,2,opt,name=isSend" json:"isSend,omitempty"`
}

func (m *FuncRecord) Reset()                    { *m = FuncRecord{} }
func (m *FuncRecord) String() string            { return proto.CompactTextString(m) }
func (*FuncRecord) ProtoMessage()               {}
func (*FuncRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *FuncRecord) GetNoncekey() []byte {
	if m != nil {
		return m.Noncekey
	}
	return nil
}

func (m *FuncRecord) GetIsSend() bool {
	if m != nil {
		return m.IsSend
	}
	return false
}

type AccountData struct {
	Balance  []byte      `protobuf:"bytes,1,opt,name=balance,proto3" json:"balance,omitempty"`
	LastFund *FuncRecord `protobuf:"bytes,2,opt,name=lastFund" json:"lastFund,omitempty"`
}

func (m *AccountData) Reset()                    { *m = AccountData{} }
func (m *AccountData) String() string            { return proto.CompactTextString(m) }
func (*AccountData) ProtoMessage()               {}
func (*AccountData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *AccountData) GetBalance() []byte {
	if m != nil {
		return m.Balance
	}
	return nil
}

func (m *AccountData) GetLastFund() *FuncRecord {
	if m != nil {
		return m.LastFund
	}
	return nil
}

type NonceData struct {
	Txid     string      `protobuf:"bytes,1,opt,name=txid" json:"txid,omitempty"`
	Amount   []byte      `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
	FromLast *FuncRecord `protobuf:"bytes,3,opt,name=fromLast" json:"fromLast,omitempty"`
	ToLast   *FuncRecord `protobuf:"bytes,4,opt,name=toLast" json:"toLast,omitempty"`
	// Types that are valid to be assigned to Other:
	//	*NonceData_NonceTime
	//	*NonceData_Noncekey
	Other isNonceData_Other `protobuf_oneof:"other"`
}

func (m *NonceData) Reset()                    { *m = NonceData{} }
func (m *NonceData) String() string            { return proto.CompactTextString(m) }
func (*NonceData) ProtoMessage()               {}
func (*NonceData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type isNonceData_Other interface {
	isNonceData_Other()
}

type NonceData_NonceTime struct {
	NonceTime *google_protobuf.Timestamp `protobuf:"bytes,6,opt,name=nonceTime,oneof"`
}
type NonceData_Noncekey struct {
	Noncekey []byte `protobuf:"bytes,7,opt,name=noncekey,proto3,oneof"`
}

func (*NonceData_NonceTime) isNonceData_Other() {}
func (*NonceData_Noncekey) isNonceData_Other()  {}

func (m *NonceData) GetOther() isNonceData_Other {
	if m != nil {
		return m.Other
	}
	return nil
}

func (m *NonceData) GetTxid() string {
	if m != nil {
		return m.Txid
	}
	return ""
}

func (m *NonceData) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *NonceData) GetFromLast() *FuncRecord {
	if m != nil {
		return m.FromLast
	}
	return nil
}

func (m *NonceData) GetToLast() *FuncRecord {
	if m != nil {
		return m.ToLast
	}
	return nil
}

func (m *NonceData) GetNonceTime() *google_protobuf.Timestamp {
	if x, ok := m.GetOther().(*NonceData_NonceTime); ok {
		return x.NonceTime
	}
	return nil
}

func (m *NonceData) GetNoncekey() []byte {
	if x, ok := m.GetOther().(*NonceData_Noncekey); ok {
		return x.Noncekey
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*NonceData) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _NonceData_OneofMarshaler, _NonceData_OneofUnmarshaler, _NonceData_OneofSizer, []interface{}{
		(*NonceData_NonceTime)(nil),
		(*NonceData_Noncekey)(nil),
	}
}

func _NonceData_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*NonceData)
	// other
	switch x := m.Other.(type) {
	case *NonceData_NonceTime:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.NonceTime); err != nil {
			return err
		}
	case *NonceData_Noncekey:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		b.EncodeRawBytes(x.Noncekey)
	case nil:
	default:
		return fmt.Errorf("NonceData.Other has unexpected type %T", x)
	}
	return nil
}

func _NonceData_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*NonceData)
	switch tag {
	case 6: // other.nonceTime
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(google_protobuf.Timestamp)
		err := b.DecodeMessage(msg)
		m.Other = &NonceData_NonceTime{msg}
		return true, err
	case 7: // other.noncekey
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeRawBytes(true)
		m.Other = &NonceData_Noncekey{x}
		return true, err
	default:
		return false, nil
	}
}

func _NonceData_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*NonceData)
	// other
	switch x := m.Other.(type) {
	case *NonceData_NonceTime:
		s := proto.Size(x.NonceTime)
		n += proto.SizeVarint(6<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case *NonceData_Noncekey:
		n += proto.SizeVarint(7<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(len(x.Noncekey)))
		n += len(x.Noncekey)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

type TokenGlobalData struct {
	TotalTokens      []byte `protobuf:"bytes,10,opt,name=totalTokens,proto3" json:"totalTokens,omitempty"`
	UnassignedTokens []byte `protobuf:"bytes,11,opt,name=unassignedTokens,proto3" json:"unassignedTokens,omitempty"`
}

func (m *TokenGlobalData) Reset()                    { *m = TokenGlobalData{} }
func (m *TokenGlobalData) String() string            { return proto.CompactTextString(m) }
func (*TokenGlobalData) ProtoMessage()               {}
func (*TokenGlobalData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *TokenGlobalData) GetTotalTokens() []byte {
	if m != nil {
		return m.TotalTokens
	}
	return nil
}

func (m *TokenGlobalData) GetUnassignedTokens() []byte {
	if m != nil {
		return m.UnassignedTokens
	}
	return nil
}

type MultiTokenMsg struct {
	TokenName string `protobuf:"bytes,1,opt,name=tokenName" json:"tokenName,omitempty"`
	TokenMsg  []byte `protobuf:"bytes,2,opt,name=tokenMsg,proto3" json:"tokenMsg,omitempty"`
}

func (m *MultiTokenMsg) Reset()                    { *m = MultiTokenMsg{} }
func (m *MultiTokenMsg) String() string            { return proto.CompactTextString(m) }
func (*MultiTokenMsg) ProtoMessage()               {}
func (*MultiTokenMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MultiTokenMsg) GetTokenName() string {
	if m != nil {
		return m.TokenName
	}
	return ""
}

func (m *MultiTokenMsg) GetTokenMsg() []byte {
	if m != nil {
		return m.TokenMsg
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleFund)(nil), "ccprotos.SimpleFund")
	proto.RegisterType((*QueryToken)(nil), "ccprotos.QueryToken")
	proto.RegisterType((*QueryTransfer)(nil), "ccprotos.QueryTransfer")
	proto.RegisterType((*QueryGlobal)(nil), "ccprotos.QueryGlobal")
	proto.RegisterType((*BaseToken)(nil), "ccprotos.BaseToken")
	proto.RegisterType((*Assign)(nil), "ccprotos.Assign")
	proto.RegisterType((*FuncRecord)(nil), "ccprotos.FuncRecord")
	proto.RegisterType((*AccountData)(nil), "ccprotos.AccountData")
	proto.RegisterType((*NonceData)(nil), "ccprotos.NonceData")
	proto.RegisterType((*TokenGlobalData)(nil), "ccprotos.TokenGlobalData")
	proto.RegisterType((*MultiTokenMsg)(nil), "ccprotos.MultiTokenMsg")
	proto.RegisterEnum("ccprotos.QueryToken_Formats", QueryToken_Formats_name, QueryToken_Formats_value)
}

func init() { proto.RegisterFile("tokentx.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 557 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x54, 0x5d, 0x6f, 0xda, 0x30,
	0x14, 0x25, 0x8c, 0x06, 0xb8, 0x19, 0x1d, 0xb2, 0xaa, 0x09, 0x21, 0xb4, 0x21, 0x4b, 0x93, 0xaa,
	0x7d, 0x84, 0xaa, 0xdb, 0xd3, 0x9e, 0x0a, 0x03, 0xd6, 0x49, 0x83, 0x69, 0x29, 0x7b, 0xd8, 0xd3,
	0x64, 0x12, 0x13, 0xa2, 0x26, 0x36, 0xb2, 0x1d, 0x09, 0xfe, 0xc2, 0x7e, 0xf2, 0x9e, 0xa6, 0xd8,
	0x86, 0xb0, 0x75, 0xdd, 0x43, 0xdf, 0x72, 0x7c, 0xcf, 0xfd, 0x38, 0xd7, 0xc7, 0x81, 0x96, 0xe2,
	0xb7, 0x94, 0xa9, 0xad, 0xbf, 0x11, 0x5c, 0x71, 0xd4, 0x08, 0x43, 0xfd, 0x21, 0xbb, 0xaf, 0xd6,
	0xbb, 0x0d, 0x15, 0x29, 0x8d, 0x62, 0x2a, 0x7c, 0xb2, 0x0c, 0xd7, 0x24, 0x61, 0x3e, 0x17, 0xf1,
	0xc0, 0xc4, 0x07, 0x6a, 0x4b, 0xa2, 0x48, 0x98, 0xb4, 0xee, 0xf3, 0x98, 0xf3, 0x38, 0xa5, 0x26,
	0xb6, 0xcc, 0x57, 0x03, 0x95, 0x64, 0x54, 0x2a, 0x92, 0x6d, 0x0c, 0x01, 0xaf, 0x01, 0x6e, 0x92,
	0x6c, 0x93, 0xd2, 0x69, 0xce, 0x22, 0xf4, 0x14, 0x5c, 0x92, 0xf1, 0x9c, 0xa9, 0x8e, 0xd3, 0x77,
	0xce, 0x1f, 0x07, 0x16, 0xa1, 0x67, 0x50, 0x55, 0xbc, 0x53, 0xed, 0x3b, 0xe7, 0xde, 0xe5, 0xa9,
	0xc9, 0x94, 0xfe, 0x62, 0x3b, 0x8c, 0x22, 0x11, 0x54, 0x15, 0x47, 0x18, 0x6a, 0x2b, 0xc1, 0xb3,
	0xce, 0xa3, 0x7f, 0x32, 0x74, 0x0c, 0xff, 0x74, 0x00, 0xbe, 0xe6, 0x54, 0xec, 0x16, 0x85, 0x30,
	0xf4, 0x0e, 0xdc, 0x15, 0x17, 0x19, 0x31, 0xad, 0x4e, 0x2f, 0x7b, 0xfe, 0x5e, 0xa1, 0x5f, 0xb2,
	0xfc, 0xa9, 0xa6, 0xc8, 0xc0, 0x72, 0x8b, 0x46, 0x85, 0xba, 0x7b, 0x46, 0xd1, 0x31, 0x8c, 0xa1,
	0x6e, 0xd3, 0x10, 0x80, 0x3b, 0xff, 0x36, 0x1b, 0x4d, 0x82, 0x76, 0x05, 0x79, 0x50, 0x9f, 0xcc,
	0x3f, 0x7c, 0x19, 0x4f, 0xc6, 0x6d, 0x07, 0xbf, 0x80, 0x96, 0xe9, 0x22, 0x08, 0x93, 0x2b, 0x2a,
	0xd0, 0x19, 0x9c, 0x30, 0xce, 0x42, 0x6a, 0x85, 0x1b, 0x80, 0x5b, 0xe0, 0x69, 0xda, 0xc7, 0x94,
	0x2f, 0x49, 0x8a, 0xdf, 0x40, 0x73, 0x44, 0x24, 0x35, 0x02, 0xfa, 0xe0, 0x29, 0xae, 0x48, 0xaa,
	0x91, 0xb4, 0x79, 0xc7, 0x47, 0xf8, 0x0a, 0xdc, 0xa1, 0x94, 0x49, 0xcc, 0x1e, 0xba, 0x57, 0x7c,
	0x05, 0x30, 0xcd, 0x59, 0x18, 0xd0, 0x90, 0x8b, 0x08, 0x75, 0xa1, 0xa1, 0xc7, 0xba, 0xa5, 0x3b,
	0x5b, 0xe7, 0x80, 0x8b, 0x0e, 0x89, 0xbc, 0xa1, 0x2c, 0xd2, 0xd5, 0x1a, 0x81, 0x45, 0xf8, 0x3b,
	0x78, 0xc3, 0x30, 0x2c, 0x9a, 0x8d, 0x89, 0x22, 0xa8, 0x03, 0xf5, 0x25, 0x49, 0x49, 0x29, 0x74,
	0x0f, 0xd1, 0x05, 0x34, 0x52, 0x22, 0x55, 0x61, 0x03, 0x3b, 0xd0, 0x59, 0x79, 0x23, 0xe5, 0x10,
	0xc1, 0x81, 0x85, 0x7f, 0x39, 0xd0, 0x9c, 0x17, 0xfd, 0x75, 0x65, 0x04, 0x35, 0xb5, 0x4d, 0x22,
	0x5d, 0xb6, 0x19, 0xe8, 0xef, 0x23, 0xd9, 0xd5, 0x3f, 0x64, 0x5f, 0x40, 0xa3, 0xb0, 0xc4, 0x67,
	0x22, 0x95, 0xb5, 0xcc, 0x3d, 0xbd, 0xf6, 0x2c, 0xf4, 0x1a, 0x5c, 0xc5, 0x35, 0xbf, 0xf6, 0x1f,
	0xbe, 0xe5, 0xa0, 0xf7, 0xd0, 0xd4, 0x8b, 0x59, 0x24, 0x19, 0xed, 0xb8, 0x3a, 0xa1, 0xeb, 0x9b,
	0x97, 0xe0, 0xef, 0x5f, 0x82, 0xbf, 0xd8, 0xbf, 0x84, 0xeb, 0x4a, 0x50, 0xd2, 0x51, 0xef, 0x68,
	0xc9, 0xf5, 0x62, 0xea, 0xeb, 0x4a, 0xb9, 0xe6, 0x51, 0x1d, 0x4e, 0xb8, 0x5a, 0x53, 0x81, 0x7f,
	0xc0, 0x13, 0x7d, 0xcb, 0xc6, 0x19, 0x7a, 0x03, 0x7f, 0x19, 0x02, 0xee, 0x18, 0x02, 0xbd, 0x84,
	0x76, 0xce, 0x88, 0xb6, 0x04, 0x8d, 0x2c, 0xcd, 0xd3, 0xb4, 0x3b, 0xe7, 0xf8, 0x13, 0xb4, 0x66,
	0x79, 0xaa, 0x12, 0x0d, 0x67, 0x32, 0x46, 0x3d, 0x68, 0xea, 0x5f, 0xc2, 0x9c, 0x64, 0xd4, 0x6e,
	0xb9, 0x3c, 0x28, 0xbc, 0xa1, 0x2c, 0xd3, 0x2e, 0xfb, 0x80, 0x97, 0xae, 0xd6, 0xfc, 0xf6, 0x77,
	0x00, 0x00, 0x00, 0xff, 0xff, 0xd3, 0xfb, 0xc0, 0x1e, 0x53, 0x04, 0x00, 0x00,
}
