// Code generated by protoc-gen-go. DO NOT EDIT.
// source: tokentx.proto

package ccprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "hyperledger.abchain.org/protos"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type QueryToken_Formats int32

const (
	QueryToken_NUMBER  QueryToken_Formats = 0
	QueryToken_ENCODED QueryToken_Formats = 1
)

var QueryToken_Formats_name = map[int32]string{
	0: "NUMBER",
	1: "ENCODED",
}
var QueryToken_Formats_value = map[string]int32{
	"NUMBER":  0,
	"ENCODED": 1,
}

func (x QueryToken_Formats) String() string {
	return proto.EnumName(QueryToken_Formats_name, int32(x))
}
func (QueryToken_Formats) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{1, 0} }

type SimpleFund struct {
	Amount []byte         `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	To     *protos.TxAddr `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
	From   *protos.TxAddr `protobuf:"bytes,3,opt,name=from" json:"from,omitempty"`
}

func (m *SimpleFund) Reset()                    { *m = SimpleFund{} }
func (m *SimpleFund) String() string            { return proto.CompactTextString(m) }
func (*SimpleFund) ProtoMessage()               {}
func (*SimpleFund) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

func (m *SimpleFund) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *SimpleFund) GetTo() *protos.TxAddr {
	if m != nil {
		return m.To
	}
	return nil
}

func (m *SimpleFund) GetFrom() *protos.TxAddr {
	if m != nil {
		return m.From
	}
	return nil
}

type QueryToken struct {
	Format QueryToken_Formats `protobuf:"varint,1,opt,name=format,enum=ccprotos.QueryToken_Formats" json:"format,omitempty"`
	Addr   *protos.TxAddr     `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *QueryToken) Reset()                    { *m = QueryToken{} }
func (m *QueryToken) String() string            { return proto.CompactTextString(m) }
func (*QueryToken) ProtoMessage()               {}
func (*QueryToken) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

func (m *QueryToken) GetFormat() QueryToken_Formats {
	if m != nil {
		return m.Format
	}
	return QueryToken_NUMBER
}

func (m *QueryToken) GetAddr() *protos.TxAddr {
	if m != nil {
		return m.Addr
	}
	return nil
}

type QueryTransfer struct {
	Nonce []byte `protobuf:"bytes,1,opt,name=nonce,proto3" json:"nonce,omitempty"`
}

func (m *QueryTransfer) Reset()                    { *m = QueryTransfer{} }
func (m *QueryTransfer) String() string            { return proto.CompactTextString(m) }
func (*QueryTransfer) ProtoMessage()               {}
func (*QueryTransfer) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

func (m *QueryTransfer) GetNonce() []byte {
	if m != nil {
		return m.Nonce
	}
	return nil
}

type QueryGlobal struct {
}

func (m *QueryGlobal) Reset()                    { *m = QueryGlobal{} }
func (m *QueryGlobal) String() string            { return proto.CompactTextString(m) }
func (*QueryGlobal) ProtoMessage()               {}
func (*QueryGlobal) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

type BaseToken struct {
	TotalTokens []byte              `protobuf:"bytes,1,opt,name=totalTokens,proto3" json:"totalTokens,omitempty"`
	Assigns     []*BaseToken_Assign `protobuf:"bytes,2,rep,name=assigns" json:"assigns,omitempty"`
}

func (m *BaseToken) Reset()                    { *m = BaseToken{} }
func (m *BaseToken) String() string            { return proto.CompactTextString(m) }
func (*BaseToken) ProtoMessage()               {}
func (*BaseToken) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4} }

func (m *BaseToken) GetTotalTokens() []byte {
	if m != nil {
		return m.TotalTokens
	}
	return nil
}

func (m *BaseToken) GetAssigns() []*BaseToken_Assign {
	if m != nil {
		return m.Assigns
	}
	return nil
}

type BaseToken_Assign struct {
	Recv   *protos.TxAddr `protobuf:"bytes,1,opt,name=recv" json:"recv,omitempty"`
	Amount []byte         `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *BaseToken_Assign) Reset()                    { *m = BaseToken_Assign{} }
func (m *BaseToken_Assign) String() string            { return proto.CompactTextString(m) }
func (*BaseToken_Assign) ProtoMessage()               {}
func (*BaseToken_Assign) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{4, 0} }

func (m *BaseToken_Assign) GetRecv() *protos.TxAddr {
	if m != nil {
		return m.Recv
	}
	return nil
}

func (m *BaseToken_Assign) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

type Assign struct {
	Amount []byte         `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount,omitempty"`
	To     *protos.TxAddr `protobuf:"bytes,2,opt,name=to" json:"to,omitempty"`
}

func (m *Assign) Reset()                    { *m = Assign{} }
func (m *Assign) String() string            { return proto.CompactTextString(m) }
func (*Assign) ProtoMessage()               {}
func (*Assign) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{5} }

func (m *Assign) GetAmount() []byte {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Assign) GetTo() *protos.TxAddr {
	if m != nil {
		return m.To
	}
	return nil
}

func init() {
	proto.RegisterType((*SimpleFund)(nil), "ccprotos.SimpleFund")
	proto.RegisterType((*QueryToken)(nil), "ccprotos.QueryToken")
	proto.RegisterType((*QueryTransfer)(nil), "ccprotos.QueryTransfer")
	proto.RegisterType((*QueryGlobal)(nil), "ccprotos.QueryGlobal")
	proto.RegisterType((*BaseToken)(nil), "ccprotos.BaseToken")
	proto.RegisterType((*BaseToken_Assign)(nil), "ccprotos.BaseToken.Assign")
	proto.RegisterType((*Assign)(nil), "ccprotos.Assign")
	proto.RegisterEnum("ccprotos.QueryToken_Formats", QueryToken_Formats_name, QueryToken_Formats_value)
}

func init() { proto.RegisterFile("tokentx.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 350 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x9c, 0x91, 0xdf, 0x4e, 0xc2, 0x30,
	0x14, 0xc6, 0xdd, 0xd0, 0xa1, 0x67, 0x42, 0x48, 0x63, 0xcc, 0x42, 0x8c, 0x59, 0x9a, 0x98, 0x90,
	0x98, 0x94, 0x04, 0x79, 0x00, 0x41, 0xc0, 0x2b, 0x31, 0x4e, 0x7c, 0x80, 0xb2, 0x95, 0x3f, 0x71,
	0x6b, 0x49, 0x5b, 0x0c, 0xbc, 0x82, 0x6f, 0xe2, 0x5b, 0x9a, 0xb5, 0x03, 0x76, 0x81, 0x37, 0xde,
	0xb5, 0xe7, 0xfb, 0x7d, 0xe7, 0x9c, 0x2f, 0x07, 0x6a, 0x5a, 0x7c, 0x32, 0xae, 0x37, 0x64, 0x25,
	0x85, 0x16, 0xe8, 0x3c, 0x8e, 0xcd, 0x43, 0x35, 0xef, 0x17, 0xdb, 0x15, 0x93, 0x29, 0x4b, 0xe6,
	0x4c, 0x12, 0x3a, 0x8d, 0x17, 0x74, 0xc9, 0x89, 0x90, 0xf3, 0xb6, 0xd5, 0xdb, 0x7a, 0x43, 0x93,
	0x44, 0x5a, 0x1b, 0x5e, 0x00, 0xbc, 0x2f, 0xb3, 0x55, 0xca, 0x46, 0x6b, 0x9e, 0xa0, 0x6b, 0xf0,
	0x68, 0x26, 0xd6, 0x5c, 0x07, 0x4e, 0xe8, 0xb4, 0x2e, 0xa3, 0xe2, 0x87, 0x6e, 0xc1, 0xd5, 0x22,
	0x70, 0x43, 0xa7, 0xe5, 0x77, 0xea, 0xd6, 0xa9, 0xc8, 0x64, 0xd3, 0x4b, 0x12, 0x19, 0xb9, 0x5a,
	0x20, 0x0c, 0xa7, 0x33, 0x29, 0xb2, 0xa0, 0x72, 0x94, 0x30, 0x1a, 0xfe, 0x76, 0x00, 0xde, 0xd6,
	0x4c, 0x6e, 0x27, 0xf9, 0xde, 0xa8, 0x0b, 0xde, 0x4c, 0xc8, 0x8c, 0xda, 0x51, 0xf5, 0xce, 0x0d,
	0xd9, 0x05, 0x20, 0x07, 0x8a, 0x8c, 0x0c, 0xa2, 0xa2, 0x82, 0xcd, 0x07, 0xe5, 0xcb, 0xff, 0xb1,
	0x8a, 0xd1, 0x30, 0x86, 0x6a, 0x61, 0x43, 0x00, 0xde, 0xf8, 0xe3, 0xa5, 0x3f, 0x8c, 0x1a, 0x27,
	0xc8, 0x87, 0xea, 0x70, 0xfc, 0xf4, 0x3a, 0x18, 0x0e, 0x1a, 0x0e, 0xbe, 0x83, 0x9a, 0x9d, 0x22,
	0x29, 0x57, 0x33, 0x26, 0xd1, 0x15, 0x9c, 0x71, 0xc1, 0x63, 0x56, 0x04, 0xb7, 0x1f, 0x5c, 0x03,
	0xdf, 0x60, 0xcf, 0xa9, 0x98, 0xd2, 0x14, 0xff, 0x38, 0x70, 0xd1, 0xa7, 0x8a, 0xd9, 0x04, 0x21,
	0xf8, 0x5a, 0x68, 0x9a, 0x9a, 0x9f, 0x2a, 0x8c, 0xe5, 0x12, 0xea, 0x42, 0x95, 0x2a, 0xb5, 0x9c,
	0x73, 0x15, 0xb8, 0x61, 0xa5, 0xe5, 0x77, 0x9a, 0x87, 0x90, 0xfb, 0x3e, 0xa4, 0x67, 0x90, 0x68,
	0x87, 0x36, 0x07, 0xe0, 0xd9, 0x52, 0x9e, 0x56, 0xb2, 0xf8, 0xcb, 0xb4, 0x3e, 0x92, 0x36, 0xd7,
	0x4a, 0x27, 0x73, 0xcb, 0x27, 0xc3, 0x8f, 0xfb, 0x2e, 0xff, 0x3c, 0xea, 0xd4, 0x33, 0xa5, 0x87,
	0xdf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x90, 0x9c, 0x9a, 0xe8, 0x69, 0x02, 0x00, 0x00,
}
