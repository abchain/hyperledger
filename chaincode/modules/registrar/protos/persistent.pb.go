// Code generated by protoc-gen-go. DO NOT EDIT.
// source: persistent.proto

/*
Package ccprotos is a generated protocol buffer package.

It is generated from these files:
	persistent.proto
	regtx.proto

It has these top-level messages:
	RegGlobalData
	RegData
	RegPublicKey
	RevokePublicKey
	ActivePublicKey
	Settings
*/
package ccprotos

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import protos "hyperledger.abchain.org/protos"
import google_protobuf "github.com/golang/protobuf/ptypes/timestamp"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type RegGlobalData struct {
	RegPrivilege   string            `protobuf:"bytes,1,opt,name=regPrivilege" json:"regPrivilege,omitempty"`
	AdminPrivilege string            `protobuf:"bytes,2,opt,name=adminPrivilege" json:"adminPrivilege,omitempty"`
	Chaincodes     map[uint32]string `protobuf:"bytes,5,rep,name=chaincodes" json:"chaincodes,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	DeployFlag     []byte            `protobuf:"bytes,10,opt,name=deployFlag,proto3" json:"deployFlag,omitempty"`
}

func (m *RegGlobalData) Reset()                    { *m = RegGlobalData{} }
func (m *RegGlobalData) String() string            { return proto.CompactTextString(m) }
func (*RegGlobalData) ProtoMessage()               {}
func (*RegGlobalData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *RegGlobalData) GetRegPrivilege() string {
	if m != nil {
		return m.RegPrivilege
	}
	return ""
}

func (m *RegGlobalData) GetAdminPrivilege() string {
	if m != nil {
		return m.AdminPrivilege
	}
	return ""
}

func (m *RegGlobalData) GetChaincodes() map[uint32]string {
	if m != nil {
		return m.Chaincodes
	}
	return nil
}

func (m *RegGlobalData) GetDeployFlag() []byte {
	if m != nil {
		return m.DeployFlag
	}
	return nil
}

type RegData struct {
	Pk        *protos.PublicKey          `protobuf:"bytes,1,opt,name=pk" json:"pk,omitempty"`
	RegTxid   string                     `protobuf:"bytes,3,opt,name=regTxid" json:"regTxid,omitempty"`
	RegTs     *google_protobuf.Timestamp `protobuf:"bytes,4,opt,name=regTs" json:"regTs,omitempty"`
	Region    string                     `protobuf:"bytes,5,opt,name=region" json:"region,omitempty"`
	Enabled   bool                       `protobuf:"varint,6,opt,name=enabled" json:"enabled,omitempty"`
	Authcodes []uint32                   `protobuf:"varint,10,rep,packed,name=authcodes" json:"authcodes,omitempty"`
}

func (m *RegData) Reset()                    { *m = RegData{} }
func (m *RegData) String() string            { return proto.CompactTextString(m) }
func (*RegData) ProtoMessage()               {}
func (*RegData) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RegData) GetPk() *protos.PublicKey {
	if m != nil {
		return m.Pk
	}
	return nil
}

func (m *RegData) GetRegTxid() string {
	if m != nil {
		return m.RegTxid
	}
	return ""
}

func (m *RegData) GetRegTs() *google_protobuf.Timestamp {
	if m != nil {
		return m.RegTs
	}
	return nil
}

func (m *RegData) GetRegion() string {
	if m != nil {
		return m.Region
	}
	return ""
}

func (m *RegData) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *RegData) GetAuthcodes() []uint32 {
	if m != nil {
		return m.Authcodes
	}
	return nil
}

func init() {
	proto.RegisterType((*RegGlobalData)(nil), "ccprotos.RegGlobalData")
	proto.RegisterType((*RegData)(nil), "ccprotos.RegData")
}

func init() { proto.RegisterFile("persistent.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 370 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0x50, 0x4d, 0x6f, 0xd4, 0x30,
	0x14, 0x54, 0x12, 0xb2, 0x6d, 0x5f, 0xbb, 0x50, 0x2c, 0x84, 0xac, 0x08, 0x41, 0xd8, 0x03, 0x44,
	0x42, 0xf2, 0xa2, 0x72, 0x41, 0x48, 0x9c, 0xf8, 0xe8, 0x81, 0x4b, 0x65, 0xf5, 0x0f, 0x38, 0xc9,
	0xc3, 0x6b, 0xad, 0x37, 0xb6, 0x1c, 0xa7, 0x22, 0x67, 0xfe, 0x1c, 0x3f, 0x0b, 0xad, 0xbd, 0xe9,
	0x7e, 0xdc, 0xde, 0x8c, 0x67, 0xfc, 0xe6, 0x0d, 0x5c, 0x5b, 0x74, 0xbd, 0xea, 0x3d, 0x76, 0x9e,
	0x59, 0x67, 0xbc, 0x21, 0xe7, 0x4d, 0x13, 0x86, 0xbe, 0xf8, 0xb0, 0x1a, 0x2d, 0x3a, 0x8d, 0xad,
	0x44, 0xc7, 0x44, 0xdd, 0xac, 0x84, 0xea, 0x98, 0x71, 0x72, 0x19, 0xdf, 0x97, 0x8d, 0x1b, 0xad,
	0x37, 0xd1, 0x56, 0xbc, 0x91, 0xc6, 0x48, 0x8d, 0xf1, 0xad, 0x1e, 0x7e, 0x2f, 0xbd, 0xda, 0x60,
	0xef, 0xc5, 0xc6, 0x46, 0xc1, 0xe2, 0x6f, 0x0a, 0x73, 0x8e, 0xf2, 0x56, 0x9b, 0x5a, 0xe8, 0xef,
	0xc2, 0x0b, 0xb2, 0x80, 0x2b, 0x87, 0xf2, 0xce, 0xa9, 0x07, 0xa5, 0x51, 0x22, 0x4d, 0xca, 0xa4,
	0xba, 0xe0, 0x47, 0x1c, 0x79, 0x07, 0x4f, 0x45, 0xbb, 0x51, 0xdd, 0x5e, 0x95, 0x06, 0xd5, 0x09,
	0x4b, 0x6e, 0x01, 0x42, 0xbe, 0xc6, 0xb4, 0xd8, 0xd3, 0xbc, 0xcc, 0xaa, 0xcb, 0x9b, 0xf7, 0x6c,
	0x3a, 0x85, 0x1d, 0x2d, 0x66, 0xdf, 0x1e, 0x95, 0x3f, 0x3a, 0xef, 0x46, 0x7e, 0x60, 0x25, 0xaf,
	0x01, 0x5a, 0xb4, 0xda, 0x8c, 0x3f, 0xb5, 0x90, 0x14, 0xca, 0xa4, 0xba, 0xe2, 0x07, 0x4c, 0xf1,
	0x15, 0x9e, 0x9d, 0xd8, 0xc9, 0x35, 0x64, 0x6b, 0x1c, 0x43, 0xfc, 0x39, 0xdf, 0x8e, 0xe4, 0x05,
	0xe4, 0x0f, 0x42, 0x0f, 0x53, 0xd8, 0x08, 0xbe, 0xa4, 0x9f, 0x93, 0xc5, 0xbf, 0x04, 0xce, 0x38,
	0xca, 0x70, 0xff, 0x5b, 0x48, 0xed, 0x3a, 0xd8, 0x2e, 0x6f, 0x9e, 0xb3, 0x5d, 0xd2, 0xbb, 0xa1,
	0xd6, 0xaa, 0xf9, 0x85, 0x23, 0x4f, 0xed, 0x9a, 0x50, 0x38, 0x73, 0x28, 0xef, 0xff, 0xa8, 0x96,
	0x66, 0xe1, 0xab, 0x09, 0x92, 0x8f, 0x90, 0x6f, 0xc7, 0x9e, 0x3e, 0x09, 0xfe, 0x82, 0xc5, 0xfe,
	0xd9, 0xd4, 0x3f, 0xbb, 0x9f, 0xfa, 0xe7, 0x51, 0x48, 0x5e, 0xc2, 0xcc, 0xa1, 0x54, 0xa6, 0xa3,
	0x79, 0xf8, 0x6a, 0x87, 0xb6, 0x3b, 0xb0, 0x13, 0xb5, 0xc6, 0x96, 0xce, 0xca, 0xa4, 0x3a, 0xe7,
	0x13, 0x24, 0xaf, 0xe0, 0x42, 0x0c, 0x7e, 0x15, 0x3b, 0x85, 0x32, 0xab, 0xe6, 0x7c, 0x4f, 0xd4,
	0xb3, 0xb0, 0xea, 0xd3, 0xff, 0x00, 0x00, 0x00, 0xff, 0xff, 0x95, 0x78, 0xfb, 0x43, 0x43, 0x02,
	0x00, 0x00,
}
